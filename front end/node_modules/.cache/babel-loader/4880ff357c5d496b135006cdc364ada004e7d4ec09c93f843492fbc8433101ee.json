{"ast":null,"code":"import dataMocked from '../data/data';\nimport axios from 'axios';\nimport { getUser, getActivity, getAverageSessions, getPerfs } from './infosUserRetriever.js';\nconst DataRetriever = async (cas, userId) => {\n  cas = 3;\n  let results = [];\n  switch (cas) {\n    case 1:\n      results.push(dataMocked.USER_MAIN_DATA[0].userInfos.firstName);\n      results.push(dataMocked.USER_ACTIVITY[0].sessions);\n      results.push(dataMocked.USER_AVERAGE_SESSIONS[0]);\n      results.push(dataMocked.USER_PERFORMANCE[0].data);\n      results.push(dataMocked.USER_MAIN_DATA[0].score * 100);\n      results.push(dataMocked.USER_MAIN_DATA[0].score);\n      results.push(dataMocked.USER_MAIN_DATA[0].keyData.calorieCount / 1000);\n      results.push(dataMocked.USER_MAIN_DATA[0].keyData.proteinCount);\n      results.push(dataMocked.USER_MAIN_DATA[0].keyData.carbohydrateCount);\n      results.push(dataMocked.USER_MAIN_DATA[0].keyData.lipidCount);\n      break;\n    case 2:\n      results.push(dataMocked.USER_MAIN_DATA[1].userInfos.firstName);\n      results.push(dataMocked.USER_ACTIVITY[1].sessions);\n      results.push(dataMocked.USER_AVERAGE_SESSIONS[1]);\n      results.push(dataMocked.USER_PERFORMANCE[1].data);\n      results.push(dataMocked.USER_MAIN_DATA[1].score * 100);\n      results.push(dataMocked.USER_MAIN_DATA[1].score);\n      results.push(dataMocked.USER_MAIN_DATA[1].keyData.calorieCount / 1000);\n      results.push(dataMocked.USER_MAIN_DATA[1].keyData.proteinCount);\n      results.push(dataMocked.USER_MAIN_DATA[1].keyData.carbohydrateCount);\n      results.push(dataMocked.USER_MAIN_DATA[1].keyData.lipidCount);\n      break;\n    case 3:\n      // const mainData = await axios.get('http://localhost:3000/user/12')\n      // const userActivity = await axios.get('http://localhost:3000/user/12/activity')\n      // const userAverageSessions = await axios.get('http://localhost:3000/user/12/average-sessions')\n      // const perfs = await axios.get('http://localhost:3000/user/12/performance')\n      // results.push(mainData.data.data.userInfos.firstName)\n      // results.push(userActivity.data.data.sessions)\n      // results.push(userAverageSessions.data.data)\n      // results.push(perfs.data.data.data)\n      // results.push(mainData.data.data.todayScore * 100)\n      // results.push(mainData.data.data.todayScore)\n      // results.push(mainData.data.data.keyData.calorieCount / 1000)\n      // results.push(mainData.data.data.keyData.proteinCount)\n      // results.push(mainData.data.data.keyData.carbohydrateCount)\n      // results.push(mainData.data.data.keyData.lipidCount)\n      // console.log(mainData.data.data.keyData.calorieCount / 1000)\n\n      const mainData = await axios.get('http://localhost:3000/user/12');\n      const mainData2 = await getUser(userId);\n      const userActivity = await axios.get('http://localhost:3000/user/12/activity');\n      const userAverageSessions = await axios.get('http://localhost:3000/user/12/average-sessions');\n      const perfs = await axios.get('http://localhost:3000/user/12/performance');\n      console.log(mainData);\n      console.log(mainData2);\n      // console.log(userAverageSessions);\n      results.push(mainData2.data.data.userInfos.firstName);\n      results.push(userActivity.data.data.sessions);\n      results.push(userAverageSessions.data.data);\n      results.push(perfs.data.data.data);\n      results.push(mainData.data.data.todayScore * 100);\n      results.push(mainData.data.data.todayScore);\n      results.push(mainData.data.data.keyData.calorieCount / 1000);\n      results.push(mainData.data.data.keyData.proteinCount);\n      results.push(mainData.data.data.keyData.carbohydrateCount);\n      results.push(mainData.data.data.keyData.lipidCount);\n      // console.log(mainData.data.data.keyData.calorieCount / 1000)\n      // console.log(dataMocked.USER_MAIN_DATA[0].score)\n      break;\n    default:\n      break;\n  }\n  return results;\n};\n_c = DataRetriever;\nexport default DataRetriever;\nvar _c;\n$RefreshReg$(_c, \"DataRetriever\");","map":{"version":3,"names":["dataMocked","axios","getUser","getActivity","getAverageSessions","getPerfs","DataRetriever","cas","userId","results","push","USER_MAIN_DATA","userInfos","firstName","USER_ACTIVITY","sessions","USER_AVERAGE_SESSIONS","USER_PERFORMANCE","data","score","keyData","calorieCount","proteinCount","carbohydrateCount","lipidCount","mainData","get","mainData2","userActivity","userAverageSessions","perfs","console","log","todayScore","_c","$RefreshReg$"],"sources":["C:/Users/sebas/Documents/Documents/Openclassrooms/P12/SportSee/front end/src/service/dataRetriever.jsx"],"sourcesContent":["import dataMocked from '../data/data'\r\nimport axios from 'axios'\r\nimport { getUser, getActivity, getAverageSessions, getPerfs } from './infosUserRetriever.js';\r\n\r\nconst DataRetriever = async (cas, userId) => {\r\n    cas = 3;\r\n    let results = []\r\n    switch (cas) {\r\n        case 1:\r\n            results.push(dataMocked.USER_MAIN_DATA[0].userInfos.firstName)\r\n            results.push(dataMocked.USER_ACTIVITY[0].sessions)\r\n            results.push(dataMocked.USER_AVERAGE_SESSIONS[0])\r\n            results.push(dataMocked.USER_PERFORMANCE[0].data)\r\n            results.push(dataMocked.USER_MAIN_DATA[0].score * 100)\r\n            results.push(dataMocked.USER_MAIN_DATA[0].score)\r\n            results.push(dataMocked.USER_MAIN_DATA[0].keyData.calorieCount / 1000)\r\n            results.push(dataMocked.USER_MAIN_DATA[0].keyData.proteinCount)\r\n            results.push(dataMocked.USER_MAIN_DATA[0].keyData.carbohydrateCount)\r\n            results.push(dataMocked.USER_MAIN_DATA[0].keyData.lipidCount)\r\n            break;\r\n        case 2:\r\n            results.push(dataMocked.USER_MAIN_DATA[1].userInfos.firstName)\r\n            results.push(dataMocked.USER_ACTIVITY[1].sessions)\r\n            results.push(dataMocked.USER_AVERAGE_SESSIONS[1])\r\n            results.push(dataMocked.USER_PERFORMANCE[1].data)\r\n            results.push(dataMocked.USER_MAIN_DATA[1].score * 100)\r\n            results.push(dataMocked.USER_MAIN_DATA[1].score)\r\n            results.push(dataMocked.USER_MAIN_DATA[1].keyData.calorieCount / 1000)\r\n            results.push(dataMocked.USER_MAIN_DATA[1].keyData.proteinCount)\r\n            results.push(dataMocked.USER_MAIN_DATA[1].keyData.carbohydrateCount)\r\n            results.push(dataMocked.USER_MAIN_DATA[1].keyData.lipidCount)\r\n            break;\r\n        case 3:\r\n            // const mainData = await axios.get('http://localhost:3000/user/12')\r\n            // const userActivity = await axios.get('http://localhost:3000/user/12/activity')\r\n            // const userAverageSessions = await axios.get('http://localhost:3000/user/12/average-sessions')\r\n            // const perfs = await axios.get('http://localhost:3000/user/12/performance')\r\n            // results.push(mainData.data.data.userInfos.firstName)\r\n            // results.push(userActivity.data.data.sessions)\r\n            // results.push(userAverageSessions.data.data)\r\n            // results.push(perfs.data.data.data)\r\n            // results.push(mainData.data.data.todayScore * 100)\r\n            // results.push(mainData.data.data.todayScore)\r\n            // results.push(mainData.data.data.keyData.calorieCount / 1000)\r\n            // results.push(mainData.data.data.keyData.proteinCount)\r\n            // results.push(mainData.data.data.keyData.carbohydrateCount)\r\n            // results.push(mainData.data.data.keyData.lipidCount)\r\n            // console.log(mainData.data.data.keyData.calorieCount / 1000)\r\n\r\n            const mainData = await axios.get('http://localhost:3000/user/12')\r\n            const mainData2 = await getUser(userId)\r\n            const userActivity = await axios.get('http://localhost:3000/user/12/activity')\r\n            const userAverageSessions = await axios.get('http://localhost:3000/user/12/average-sessions')\r\n            const perfs = await axios.get('http://localhost:3000/user/12/performance')\r\n\r\n            console.log(mainData);\r\n            console.log(mainData2);\r\n            // console.log(userAverageSessions);\r\n            results.push(mainData2.data.data.userInfos.firstName)\r\n            results.push(userActivity.data.data.sessions)\r\n            results.push(userAverageSessions.data.data)\r\n            results.push(perfs.data.data.data)\r\n            results.push(mainData.data.data.todayScore * 100)\r\n            results.push(mainData.data.data.todayScore)\r\n            results.push(mainData.data.data.keyData.calorieCount / 1000)\r\n            results.push(mainData.data.data.keyData.proteinCount)\r\n            results.push(mainData.data.data.keyData.carbohydrateCount)\r\n            results.push(mainData.data.data.keyData.lipidCount)\r\n            // console.log(mainData.data.data.keyData.calorieCount / 1000)\r\n            // console.log(dataMocked.USER_MAIN_DATA[0].score)\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return results\r\n}\r\n\r\nexport default DataRetriever"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}