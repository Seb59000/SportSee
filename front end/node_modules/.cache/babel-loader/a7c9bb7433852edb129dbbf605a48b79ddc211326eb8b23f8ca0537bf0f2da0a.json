{"ast":null,"code":"import dataMocked from '../data/data';\nimport axios from 'axios';\nconst DataRetriever = async cas => {\n  cas = 3;\n  let results = [];\n  switch (cas) {\n    case 1:\n      results.push(dataMocked.USER_MAIN_DATA[0].userInfos.firstName);\n      results.push(dataMocked.USER_ACTIVITY[0].sessions);\n      results.push(dataMocked.USER_AVERAGE_SESSIONS[0]);\n      results.push(dataMocked.USER_PERFORMANCE[0].data);\n      results.push(dataMocked.USER_MAIN_DATA[0].score * 100);\n      results.push(dataMocked.USER_MAIN_DATA[0].score);\n      results.push(dataMocked.USER_MAIN_DATA[0].keyData.calorieCount / 1000);\n      results.push(dataMocked.USER_MAIN_DATA[0].keyData.proteinCount);\n      results.push(dataMocked.USER_MAIN_DATA[0].keyData.carbohydrateCount);\n      results.push(dataMocked.USER_MAIN_DATA[0].keyData.lipidCount);\n      break;\n    case 2:\n      results.push(dataMocked.USER_MAIN_DATA[1].userInfos.firstName);\n      results.push(dataMocked.USER_ACTIVITY[1].sessions);\n      results.push(dataMocked.USER_AVERAGE_SESSIONS[1]);\n      results.push(dataMocked.USER_PERFORMANCE[1].data);\n      results.push(dataMocked.USER_MAIN_DATA[1].score * 100);\n      results.push(dataMocked.USER_MAIN_DATA[1].score);\n      results.push(dataMocked.USER_MAIN_DATA[1].keyData.calorieCount / 1000);\n      results.push(dataMocked.USER_MAIN_DATA[1].keyData.proteinCount);\n      results.push(dataMocked.USER_MAIN_DATA[1].keyData.carbohydrateCount);\n      results.push(dataMocked.USER_MAIN_DATA[1].keyData.lipidCount);\n      break;\n    case 3:\n      const mainData = await axios.get('http://localhost:3000/user/12');\n      const userActivity = await axios.get('http://localhost:3000/user/12/activity');\n      const userAverageSessions = await axios.get('http://localhost:3000/user/12/average-sessions');\n      const perfs = await axios.get('http://localhost:3000/user/12/performance');\n      console.log(userActivity);\n      console.log(userAverageSessions);\n      results.push(mainData.data.data.userInfos.firstName);\n      results.push(userActivity.data.data.sessions);\n      results.push(userAverageSessions.data.data);\n      results.push(perfs.data.data.data);\n      results.push(mainData.data.data.todayScore * 100);\n      results.push(mainData.data.data.todayScore);\n      results.push(mainData.data.data.keyData.calorieCount / 1000);\n      results.push(mainData.data.data.keyData.proteinCount);\n      results.push(mainData.data.data.keyData.carbohydrateCount);\n      results.push(mainData.data.data.keyData.lipidCount);\n      console.log(mainData.data.data.keyData.calorieCount / 1000);\n      console.log(dataMocked.USER_MAIN_DATA[0].score);\n      break;\n    default:\n      break;\n  }\n  return results;\n};\n_c = DataRetriever;\nexport default DataRetriever;\nvar _c;\n$RefreshReg$(_c, \"DataRetriever\");","map":{"version":3,"names":["dataMocked","axios","DataRetriever","cas","results","push","USER_MAIN_DATA","userInfos","firstName","USER_ACTIVITY","sessions","USER_AVERAGE_SESSIONS","USER_PERFORMANCE","data","score","keyData","calorieCount","proteinCount","carbohydrateCount","lipidCount","mainData","get","userActivity","userAverageSessions","perfs","console","log","todayScore","_c","$RefreshReg$"],"sources":["C:/Users/sebas/Documents/Documents/Openclassrooms/P12/SportSee/front end/src/service/dataRetriever.jsx"],"sourcesContent":["import dataMocked from '../data/data'\r\nimport axios from 'axios'\r\n\r\nconst DataRetriever = async (cas) => {\r\n    cas = 3;\r\n    let results = []\r\n    switch (cas) {\r\n        case 1:\r\n            results.push(dataMocked.USER_MAIN_DATA[0].userInfos.firstName)\r\n            results.push(dataMocked.USER_ACTIVITY[0].sessions)\r\n            results.push(dataMocked.USER_AVERAGE_SESSIONS[0])\r\n            results.push(dataMocked.USER_PERFORMANCE[0].data)\r\n            results.push(dataMocked.USER_MAIN_DATA[0].score * 100)\r\n            results.push(dataMocked.USER_MAIN_DATA[0].score)\r\n            results.push(dataMocked.USER_MAIN_DATA[0].keyData.calorieCount / 1000)\r\n            results.push(dataMocked.USER_MAIN_DATA[0].keyData.proteinCount)\r\n            results.push(dataMocked.USER_MAIN_DATA[0].keyData.carbohydrateCount)\r\n            results.push(dataMocked.USER_MAIN_DATA[0].keyData.lipidCount)\r\n            break;\r\n        case 2:\r\n            results.push(dataMocked.USER_MAIN_DATA[1].userInfos.firstName)\r\n            results.push(dataMocked.USER_ACTIVITY[1].sessions)\r\n            results.push(dataMocked.USER_AVERAGE_SESSIONS[1])\r\n            results.push(dataMocked.USER_PERFORMANCE[1].data)\r\n            results.push(dataMocked.USER_MAIN_DATA[1].score * 100)\r\n            results.push(dataMocked.USER_MAIN_DATA[1].score)\r\n            results.push(dataMocked.USER_MAIN_DATA[1].keyData.calorieCount / 1000)\r\n            results.push(dataMocked.USER_MAIN_DATA[1].keyData.proteinCount)\r\n            results.push(dataMocked.USER_MAIN_DATA[1].keyData.carbohydrateCount)\r\n            results.push(dataMocked.USER_MAIN_DATA[1].keyData.lipidCount)\r\n            break;\r\n        case 3:\r\n            const mainData = await axios.get('http://localhost:3000/user/12')\r\n            const userActivity = await axios.get('http://localhost:3000/user/12/activity')\r\n            const userAverageSessions = await axios.get('http://localhost:3000/user/12/average-sessions')\r\n            const perfs = await axios.get('http://localhost:3000/user/12/performance')\r\n            console.log(userActivity);\r\n            console.log(userAverageSessions);\r\n            results.push(mainData.data.data.userInfos.firstName)\r\n            results.push(userActivity.data.data.sessions)\r\n            results.push(userAverageSessions.data.data)\r\n            results.push(perfs.data.data.data)\r\n            results.push(mainData.data.data.todayScore * 100)\r\n            results.push(mainData.data.data.todayScore)\r\n            results.push(mainData.data.data.keyData.calorieCount / 1000)\r\n            results.push(mainData.data.data.keyData.proteinCount)\r\n            results.push(mainData.data.data.keyData.carbohydrateCount)\r\n            results.push(mainData.data.data.keyData.lipidCount)\r\n            console.log(mainData.data.data.keyData.calorieCount / 1000)\r\n            console.log(dataMocked.USER_MAIN_DATA[0].score)\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return results\r\n}\r\n\r\nexport default DataRetriever"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}