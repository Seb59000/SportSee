{"ast":null,"code":"import dataMocked from '../data/data';\nimport { getUser, getActivity, getAverageSessions, getPerfs } from './APIControler.js';\n\n/**\r\n * switch entre API et mock\r\n * \r\n * @param {*} cas \r\n * @param {*} userId \r\n */\nconst DataRetriever = async (cas, userId) => {\n  // si params non définis\n  if (cas === undefined || userId === undefined) {\n    cas = \"mock\";\n    userId = 0;\n  }\n  let results = [];\n  switch (cas) {\n    case \"mock\":\n      // utilisation des données mockées\n      results.push(dataMocked.USER_MAIN_DATA[userId].userInfos.firstName);\n      results.push(dataMocked.USER_ACTIVITY[userId].sessions);\n      results.push(dataMocked.USER_AVERAGE_SESSIONS[userId]);\n      results.push(dataMocked.USER_PERFORMANCE[userId].data);\n      results.push(dataMocked.USER_MAIN_DATA[userId].score * 100);\n      results.push(dataMocked.USER_MAIN_DATA[userId].score);\n      results.push(dataMocked.USER_MAIN_DATA[userId].keyData.calorieCount / 1000);\n      results.push(dataMocked.USER_MAIN_DATA[userId].keyData.proteinCount);\n      results.push(dataMocked.USER_MAIN_DATA[userId].keyData.carbohydrateCount);\n      results.push(dataMocked.USER_MAIN_DATA[userId].keyData.lipidCount);\n      break;\n    case \"API\":\n      // utilisation des données de l'API\n      const mainData = await getUser(userId);\n      const userActivity = await getActivity(userId);\n      const userAverageSessions = await getAverageSessions(userId);\n      const perfs = await getPerfs(userId);\n\n      // si l'API renvoie \"error\" on renvoie les données mockées du user 0\n      if (mainData === \"error\" || userActivity === \"error\" || userAverageSessions === \"error\" || perfs === \"error\") {\n        userId = 0;\n        results.push(dataMocked.USER_MAIN_DATA[userId].userInfos.firstName);\n        results.push(dataMocked.USER_ACTIVITY[userId].sessions);\n        results.push(dataMocked.USER_AVERAGE_SESSIONS[userId]);\n        results.push(dataMocked.USER_PERFORMANCE[userId].data);\n        results.push(dataMocked.USER_MAIN_DATA[userId].score * 100);\n        results.push(dataMocked.USER_MAIN_DATA[userId].score);\n        results.push(dataMocked.USER_MAIN_DATA[userId].keyData.calorieCount / 1000);\n        results.push(dataMocked.USER_MAIN_DATA[userId].keyData.proteinCount);\n        results.push(dataMocked.USER_MAIN_DATA[userId].keyData.carbohydrateCount);\n        results.push(dataMocked.USER_MAIN_DATA[userId].keyData.lipidCount);\n        alert(\"Connection API défaillante, les données du mock ont été chargées.\");\n        break;\n      }\n      results.push(mainData.data.data.userInfos.firstName);\n      results.push(userActivity.data.data.sessions);\n      results.push(userAverageSessions.data.data);\n      results.push(perfs.data.data.data);\n      if (mainData.data.data.todayScore === undefined) {\n        results.push(mainData.data.data.score * 100);\n        results.push(mainData.data.data.score);\n      } else {\n        results.push(mainData.data.data.todayScore * 100);\n        results.push(mainData.data.data.todayScore);\n      }\n      results.push(mainData.data.data.keyData.calorieCount / 1000);\n      results.push(mainData.data.data.keyData.proteinCount);\n      results.push(mainData.data.data.keyData.carbohydrateCount);\n      results.push(mainData.data.data.keyData.lipidCount);\n      break;\n    default:\n      // par défaut on renvoie le mock du user 0\n      userId = 0;\n      results.push(dataMocked.USER_MAIN_DATA[userId].userInfos.firstName);\n      results.push(dataMocked.USER_ACTIVITY[userId].sessions);\n      results.push(dataMocked.USER_AVERAGE_SESSIONS[userId]);\n      results.push(dataMocked.USER_PERFORMANCE[userId].data);\n      results.push(dataMocked.USER_MAIN_DATA[userId].score * 100);\n      results.push(dataMocked.USER_MAIN_DATA[userId].score);\n      results.push(dataMocked.USER_MAIN_DATA[userId].keyData.calorieCount / 1000);\n      results.push(dataMocked.USER_MAIN_DATA[userId].keyData.proteinCount);\n      results.push(dataMocked.USER_MAIN_DATA[userId].keyData.carbohydrateCount);\n      results.push(dataMocked.USER_MAIN_DATA[userId].keyData.lipidCount);\n      break;\n  }\n  return results;\n};\n_c = DataRetriever;\nexport default DataRetriever;\nvar _c;\n$RefreshReg$(_c, \"DataRetriever\");","map":{"version":3,"names":["dataMocked","getUser","getActivity","getAverageSessions","getPerfs","DataRetriever","cas","userId","undefined","results","push","USER_MAIN_DATA","userInfos","firstName","USER_ACTIVITY","sessions","USER_AVERAGE_SESSIONS","USER_PERFORMANCE","data","score","keyData","calorieCount","proteinCount","carbohydrateCount","lipidCount","mainData","userActivity","userAverageSessions","perfs","alert","todayScore","_c","$RefreshReg$"],"sources":["C:/Users/sebas/Documents/Documents/Openclassrooms/P12/SportSee/front end/src/service/dataRetriever.jsx"],"sourcesContent":["import dataMocked from '../data/data'\r\nimport { getUser, getActivity, getAverageSessions, getPerfs } from './APIControler.js';\r\n\r\n/**\r\n * switch entre API et mock\r\n * \r\n * @param {*} cas \r\n * @param {*} userId \r\n */\r\nconst DataRetriever = async (cas, userId) => {\r\n    // si params non définis\r\n    if (cas === undefined || userId === undefined) {\r\n        cas = \"mock\";\r\n        userId = 0;\r\n    }\r\n\r\n    let results = []\r\n    switch (cas) {\r\n        case \"mock\":\r\n            // utilisation des données mockées\r\n            results.push(dataMocked.USER_MAIN_DATA[userId].userInfos.firstName)\r\n            results.push(dataMocked.USER_ACTIVITY[userId].sessions)\r\n            results.push(dataMocked.USER_AVERAGE_SESSIONS[userId])\r\n            results.push(dataMocked.USER_PERFORMANCE[userId].data)\r\n            results.push(dataMocked.USER_MAIN_DATA[userId].score * 100)\r\n            results.push(dataMocked.USER_MAIN_DATA[userId].score)\r\n            results.push(dataMocked.USER_MAIN_DATA[userId].keyData.calorieCount / 1000)\r\n            results.push(dataMocked.USER_MAIN_DATA[userId].keyData.proteinCount)\r\n            results.push(dataMocked.USER_MAIN_DATA[userId].keyData.carbohydrateCount)\r\n            results.push(dataMocked.USER_MAIN_DATA[userId].keyData.lipidCount)\r\n            break;\r\n        case \"API\":\r\n            // utilisation des données de l'API\r\n            const mainData = await getUser(userId)\r\n            const userActivity = await getActivity(userId)\r\n            const userAverageSessions = await getAverageSessions(userId)\r\n            const perfs = await getPerfs(userId)\r\n\r\n            // si l'API renvoie \"error\" on renvoie les données mockées du user 0\r\n            if (mainData === \"error\" || userActivity === \"error\" || userAverageSessions === \"error\" || perfs === \"error\") {\r\n                userId = 0\r\n                results.push(dataMocked.USER_MAIN_DATA[userId].userInfos.firstName)\r\n                results.push(dataMocked.USER_ACTIVITY[userId].sessions)\r\n                results.push(dataMocked.USER_AVERAGE_SESSIONS[userId])\r\n                results.push(dataMocked.USER_PERFORMANCE[userId].data)\r\n                results.push(dataMocked.USER_MAIN_DATA[userId].score * 100)\r\n                results.push(dataMocked.USER_MAIN_DATA[userId].score)\r\n                results.push(dataMocked.USER_MAIN_DATA[userId].keyData.calorieCount / 1000)\r\n                results.push(dataMocked.USER_MAIN_DATA[userId].keyData.proteinCount)\r\n                results.push(dataMocked.USER_MAIN_DATA[userId].keyData.carbohydrateCount)\r\n                results.push(dataMocked.USER_MAIN_DATA[userId].keyData.lipidCount)\r\n                alert(\"Connection API défaillante, les données du mock ont été chargées.\");\r\n                break;\r\n            }\r\n            results.push(mainData.data.data.userInfos.firstName)\r\n            results.push(userActivity.data.data.sessions)\r\n            results.push(userAverageSessions.data.data)\r\n            results.push(perfs.data.data.data)\r\n            if (mainData.data.data.todayScore === undefined) {\r\n                results.push(mainData.data.data.score * 100)\r\n                results.push(mainData.data.data.score)\r\n            } else {\r\n                results.push(mainData.data.data.todayScore * 100)\r\n                results.push(mainData.data.data.todayScore)\r\n            }\r\n            results.push(mainData.data.data.keyData.calorieCount / 1000)\r\n            results.push(mainData.data.data.keyData.proteinCount)\r\n            results.push(mainData.data.data.keyData.carbohydrateCount)\r\n            results.push(mainData.data.data.keyData.lipidCount)\r\n            break;\r\n        default:\r\n            // par défaut on renvoie le mock du user 0\r\n            userId = 0\r\n            results.push(dataMocked.USER_MAIN_DATA[userId].userInfos.firstName)\r\n            results.push(dataMocked.USER_ACTIVITY[userId].sessions)\r\n            results.push(dataMocked.USER_AVERAGE_SESSIONS[userId])\r\n            results.push(dataMocked.USER_PERFORMANCE[userId].data)\r\n            results.push(dataMocked.USER_MAIN_DATA[userId].score * 100)\r\n            results.push(dataMocked.USER_MAIN_DATA[userId].score)\r\n            results.push(dataMocked.USER_MAIN_DATA[userId].keyData.calorieCount / 1000)\r\n            results.push(dataMocked.USER_MAIN_DATA[userId].keyData.proteinCount)\r\n            results.push(dataMocked.USER_MAIN_DATA[userId].keyData.carbohydrateCount)\r\n            results.push(dataMocked.USER_MAIN_DATA[userId].keyData.lipidCount)\r\n            break;\r\n    }\r\n\r\n    return results\r\n}\r\n\r\nexport default DataRetriever"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}